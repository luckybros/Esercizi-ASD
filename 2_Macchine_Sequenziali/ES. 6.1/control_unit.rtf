{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red70\green137\blue204;
\red255\green255\blue255;\red67\green192\blue160;\red202\green202\blue202;\red212\green214\blue154;\red167\green197\blue152;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c33725\c61176\c83922;
\cssrgb\c100000\c100000\c100000;\cssrgb\c30588\c78824\c69020;\cssrgb\c83137\c83137\c83137;\cssrgb\c86275\c86275\c66667;\cssrgb\c70980\c80784\c65882;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 library\strokec5  IEEE;\
\strokec4 use\strokec5  IEEE.std_logic_1164.\strokec4 ALL\strokec5 ;\
\strokec4 use\strokec5  IEEE.numeric_std.\strokec4 ALL\strokec5 ;\
\
\strokec4 entity\strokec5  \strokec6 control_unit\strokec5  \strokec4 is\strokec5 \
    \strokec4 port\strokec5  (\
        start   : \strokec4 in\strokec5  \strokec6 std_logic\strokec5 ;\
        clk_cu  : \strokec4 in\strokec5  \strokec6 std_logic\strokec5 ;\
        end_count  : \strokec4 in\strokec5  \strokec6 std_logic\strokec5 ;\
        rst_cu  : \strokec4 in\strokec5  \strokec6 std_logic\strokec5 ;\
        rd_cu   : \strokec4 out\strokec5  \strokec6 std_logic\strokec5 ;\
        wrt_cu  : \strokec4 out\strokec5  \strokec6 std_logic\strokec5 ;\
        en_cu   : \strokec4 out\strokec5  \strokec6 std_logic\strokec5 ;\
        rst_ctr : \strokec4 out\strokec5  \strokec6 std_logic\strokec5 ;\
        end_cu :  \strokec4 out\strokec5  \strokec6 std_logic\strokec5 \
    );\
\strokec4 end\strokec5  \strokec6 control_unit\strokec5 ;\
\
\strokec4 architecture\strokec5  \strokec6 behavioural\strokec5  \strokec4 of\strokec5  \strokec6 control_unit\strokec5  \strokec4 is\strokec5 \
    \strokec4 type\strokec5  \strokec6 state_cu\strokec5  \strokec4 is\strokec5  (IDLE, OP, FINISHED);\
    \strokec4 signal\strokec5  current_state : state_cu \strokec7 :=\strokec5  IDLE;\
    \strokec4 signal\strokec5  next_state    : state_cu \strokec7 :=\strokec5  IDLE;\
\
\strokec4 begin\strokec5 \
    \strokec4 process\strokec5 (clk_cu)\
    \strokec4 begin\strokec5 \
        \strokec4 if\strokec5  \strokec8 rising_edge\strokec5 (clk_cu) \strokec4 then\strokec5 \
            current_state \strokec7 <=\strokec5  next_state;\
\
            \strokec4 case\strokec5  current_state \strokec4 is\strokec5 \
                \strokec4 when\strokec5  IDLE \strokec7 =>\strokec5 \
                    \strokec4 if\strokec5  start \strokec7 =\strokec5  \strokec9 '1'\strokec5  \strokec4 then\strokec5 \
                        next_state \strokec7 <=\strokec5  OP;\
                    \strokec4 else\strokec5 \
                        next_state \strokec7 <=\strokec5  IDLE;\
                    \strokec4 end\strokec5  \strokec4 if\strokec5 ;\
                \strokec4 when\strokec5  OP \strokec7 =>\strokec5 \
                \strokec4 if\strokec5  rst_cu \strokec7 =\strokec5  \strokec9 '1'\strokec5  \strokec4 then\strokec5 \
                    rst_ctr \strokec7 <=\strokec5  \strokec9 '1'\strokec5 ;\
                    next_state \strokec7 <=\strokec5  FINISHED;\
                \strokec4 else\strokec5 \
                    en_cu  \strokec7 <=\strokec5  \strokec9 '1'\strokec5 ;\
                    rd_cu  \strokec7 <=\strokec5  \strokec9 '1'\strokec5 ;\
                    wrt_cu \strokec7 <=\strokec5  \strokec9 '1'\strokec5 ;\
            \
                    \strokec4 if\strokec5  end_count \strokec7 =\strokec5  \strokec9 '1'\strokec5  \strokec4 then\strokec5 \
                        next_state \strokec7 <=\strokec5  FINISHED;\
                    \strokec4 else\strokec5 \
                        next_state \strokec7 <=\strokec5  OP;\
                    \strokec4 end\strokec5  \strokec4 if\strokec5 ;\
                \strokec4 end\strokec5  \strokec4 if\strokec5 ;\
            \
                \strokec4 when\strokec5  FINISHED \strokec7 =>\strokec5 \
                    en_cu  \strokec7 <=\strokec5  \strokec9 '0'\strokec5 ;\
                    rd_cu  \strokec7 <=\strokec5  \strokec9 '0'\strokec5 ;\
                    wrt_cu \strokec7 <=\strokec5  \strokec9 '0'\strokec5 ;\
                    end_cu \strokec7 <=\strokec5  \strokec9 '1'\strokec5 ;\
                    next_state \strokec7 <=\strokec5  IDLE;\
            \strokec4 end\strokec5  \strokec4 case\strokec5 ;\
        \strokec4 end\strokec5  \strokec4 if\strokec5 ;\
    \strokec4 end\strokec5  \strokec4 process\strokec5 ;\
\
\strokec4 end\strokec5  \strokec6 behavioural\strokec5 ;\
\
}