{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red70\green137\blue204;
\red255\green255\blue255;\red67\green192\blue160;\red167\green197\blue152;\red202\green202\blue202;\red212\green214\blue154;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c33725\c61176\c83922;
\cssrgb\c100000\c100000\c100000;\cssrgb\c30588\c78824\c69020;\cssrgb\c70980\c80784\c65882;\cssrgb\c83137\c83137\c83137;\cssrgb\c86275\c86275\c66667;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 library\strokec5  IEEE;\
\strokec4 use\strokec5  IEEE.STD_LOGIC_1164.\strokec4 ALL\strokec5 ;\
\strokec4 use\strokec5  work.\strokec4 all\strokec5 ;\
\
\strokec4 entity\strokec5  \strokec6 rom\strokec5  \strokec4 is\strokec5  \
    \strokec4 port\strokec5 (\
        address : \strokec4 in\strokec5  \strokec6 std_logic_vector\strokec5 (\strokec7 3\strokec5  \strokec4 downto\strokec5  \strokec7 0\strokec5 );\
        clk : \strokec4 in\strokec5  \strokec6 std_logic\strokec5 ;\
        rd : \strokec4 in\strokec5  \strokec6 std_logic\strokec5 ;\
        out_value : \strokec4 out\strokec5  \strokec6 std_logic_vector\strokec5 (\strokec7 7\strokec5  \strokec4 downto\strokec5  \strokec7 0\strokec5 ) \
    );\
\strokec4 end\strokec5  \strokec4 entity\strokec5  \strokec6 rom\strokec5 ;\
\
\strokec4 architecture\strokec5  \strokec6 dataflow\strokec5  \strokec4 of\strokec5  \strokec6 rom\strokec5  \strokec4 is\strokec5 \
    \strokec4 type\strokec5  \strokec6 MEMORY_16_8\strokec5  \strokec4 is\strokec5  \strokec4 array\strokec5  (\strokec7 0\strokec5  \strokec4 to\strokec5  \strokec7 15\strokec5 ) \strokec4 of\strokec5  \strokec6 std_logic_vector\strokec5 (\strokec7 7\strokec5  \strokec4 downto\strokec5  \strokec7 0\strokec5 ); \
    \strokec4 constant\strokec5  ROM_16_8 : MEMORY_16_8 \strokec8 :=\strokec5  (\
        \'93\strokec7 00010001\strokec5 \'94, \
        \'93\strokec7 00100010\strokec5 \'94, \
        \'93\strokec7 01000100\strokec5 \'94, \
        \'93\strokec7 10001000\strokec5 \'94, \
        \'93\strokec7 00010010\strokec5 \'94, \
        \'93\strokec7 00010100\strokec5 \'94, \
        \'93\strokec7 00011000\strokec5 \'94, \
        \'93\strokec7 00100001\strokec5 \'94, \
        \'93\strokec7 00100100\strokec5 \'94, \
        \'93\strokec7 00101000\strokec5 \'94, \
        \'93\strokec7 01000001\strokec5 \'94, \
        \'93\strokec7 01000010\strokec5 \'94, \
        \'93\strokec7 01001000\strokec5 \'94, \
        \'93\strokec7 10000001\strokec5 \'94, \
        \'93\strokec7 10000100\strokec5 \'94, \
        \'93\strokec7 10000010\strokec5 \'94\
    ); \
    \
    \strokec4 begin\strokec5 \
        \strokec4 process\strokec5 (clk)\
        \strokec4 begin\strokec5 \
            \strokec4 if\strokec5 (\strokec9 rising_edge\strokec5 (clk)) \strokec4 then\strokec5 \
                \strokec4 if\strokec5 (rd \strokec8 =\strokec5  \strokec7 '1'\strokec5 ) \strokec4 then\strokec5 \
                    out_value \strokec8 <=\strokec5  ROM_16_8(\strokec9 to_integer\strokec5 (\strokec6 unsigned\strokec5 (address)));\
                \strokec4 end\strokec5  \strokec4 if\strokec5 ;\
            \strokec4 end\strokec5  \strokec4 if\strokec5 ;\
        \strokec4 end\strokec5  \strokec4 process\strokec5 ;\
    \
\
\strokec4 end\strokec5  \strokec4 architecture\strokec5  \strokec6 dataflow\strokec5 ;\
\
}