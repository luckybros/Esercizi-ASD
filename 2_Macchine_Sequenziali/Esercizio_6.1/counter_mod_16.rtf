{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;\red70\green137\blue204;
\red255\green255\blue255;\red67\green192\blue160;\red167\green197\blue152;\red202\green202\blue202;\red212\green214\blue154;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\csgray\c0\c0;\cssrgb\c33725\c61176\c83922;
\cssrgb\c100000\c100000\c100000;\cssrgb\c30588\c78824\c69020;\cssrgb\c70980\c80784\c65882;\cssrgb\c83137\c83137\c83137;\cssrgb\c86275\c86275\c66667;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 library\strokec5  IEEE;\
\strokec4 use\strokec5  IEEE.std_logic_1164.\strokec4 ALL\strokec5 ;\
\strokec4 use\strokec5  IEEE.numeric_std.\strokec4 ALL\strokec5 ;\
\
\strokec4 entity\strokec5  \strokec6 counter_mod_16\strokec5  \strokec4 is\strokec5  \
    \strokec4 port\strokec5  (\
        clk_ctr, rst_ctr, en_ctr : \strokec4 in\strokec5  \strokec6 std_logic\strokec5 ;\
        curr_value : \strokec4 out\strokec5  \strokec6 std_logic_vector\strokec5 (\strokec7 3\strokec5  \strokec4 downto\strokec5  \strokec7 0\strokec5 );\
        out_ctr : \strokec4 out\strokec5  \strokec6 std_logic\strokec5 \
    );\
\strokec4 end\strokec5  \strokec6 counter_mod_16\strokec5 ;\
\
\strokec4 architecture\strokec5  \strokec6 behavioral\strokec5  \strokec4 of\strokec5  \strokec6 counter_mod_16\strokec5  \strokec4 is\strokec5 \
    \strokec4 signal\strokec5  current_value : \strokec6 std_logic_vector\strokec5 (\strokec7 3\strokec5  \strokec4 downto\strokec5  \strokec7 0\strokec5 ) \strokec8 :=\strokec5  \strokec7 "0000"\strokec5 ;\
    \strokec4 signal\strokec5  exit_ctr : \strokec6 std_logic\strokec5  \strokec8 :=\strokec5  \strokec7 '0'\strokec5 ;\
\
\strokec4 begin\strokec5 \
    mod_16: \strokec4 process\strokec5 (clk_ctr, rst_ctr)\
    \strokec4 begin\strokec5 \
        \strokec4 if\strokec5  rst_ctr \strokec8 =\strokec5  \strokec7 '1'\strokec5  \strokec4 then\strokec5 \
            current_value \strokec8 <=\strokec5  \strokec7 "0000"\strokec5 ;\
        \strokec4 elsif\strokec5  \strokec9 rising_edge\strokec5 (clk_ctr) \strokec4 then\strokec5 \
            \strokec4 if\strokec5  en_ctr \strokec8 =\strokec5  \strokec7 '1'\strokec5  \strokec4 then\strokec5 \
                current_value \strokec8 <=\strokec5  current_value \strokec8 +\strokec5  \strokec7 1\strokec5 ;\
                \strokec4 if\strokec5  current_value \strokec8 =\strokec5  \strokec7 "1111"\strokec5  \strokec4 then\strokec5 \
                    current_value \strokec8 <=\strokec5  \strokec7 "0000"\strokec5 ;\
                    exit_ctr \strokec8 <=\strokec5  \strokec7 '1'\strokec5 ;\
                \strokec4 else\strokec5 \
                    exit_ctr \strokec8 <=\strokec5  \strokec7 '0'\strokec5 ;\
                \strokec4 end\strokec5  \strokec4 if\strokec5 ;\
            \strokec4 end\strokec5  \strokec4 if\strokec5 ;\
        \strokec4 end\strokec5  \strokec4 if\strokec5 ;\
    \strokec4 end\strokec5  \strokec4 process\strokec5  mod_16;\
\
    curr_value \strokec8 <=\strokec5  current_value;\
    out_ctr \strokec8 <=\strokec5  exit_ctr;\
\
\strokec4 end\strokec5  \strokec6 behavioral\strokec5 ;\
\
}